import React, {useEffect, useState} from "react";
import "./index.scss"
import logo from "../../img/polenAnalystLogo.svg";
import Spinner from "../../Spinner";
import getUserLocale from 'get-user-locale';

function PredictPage(props) {

  const [imageTiles, setImageTiles] = useState([])
  const [faqExtended, setFaqExtended] = useState(false)
  const [chosenImage, setChosenImage] = useState(null)
  const [chosenImages, setChosenImages] = useState(null)
  const [downloadedReport, setDownloadedReport] = useState(null)
  const [correctionCsv, setCorrectionCsv] = useState(null)
  const [chosenImageHidden, setChosenImageHidden] = useState(true)
  const [isLoading, setIsLoading] = useState(false)
  const [didFormReport, setDidFormReport] = useState(false);
  const [reportPDF, setReportPDF] = useState('');
  const [reportCSV, setReportCSV] = useState('');
  const [didDownloadCsv, setDidDownloadCsv] = useState(false);


  function handleChange(selectorFiles) {
    setDidFormReport(false)
    let newImageTiles = []
    let filterSelectedFiles = Object.values(selectorFiles).filter(file => file.name.includes("jpg") || file.name.includes("png") || file.name.includes("jpeg") || file.name.includes("http"))
    setChosenImages(filterSelectedFiles.map(file => URL.createObjectURL(file)))
    for (let i = 0; i < filterSelectedFiles.length; i++) {
      newImageTiles.push(
        <div
          className={"image-tile"}
          key={filterSelectedFiles[i].name}
          onClick={() => {
            setChosenImage(i)
            setChosenImageHidden(false)
          }}
        >
          <img src={URL.createObjectURL(filterSelectedFiles[i])}/>
        </div>
      )
    }

    setImageTiles(newImageTiles)
  }

  const userLocale = getUserLocale();
  const documentLocale = userLocale.includes('ru') ? 'ru' : 'en'

  function predict() {
    setDidDownloadCsv(false)
    if (!chosenImages || !chosenImages.length) {
      return
    }
    setIsLoading(true)
    const API_ENDPOINT = `https://pollen-server.ngrok.io/predict?locale=${documentLocale}`;
    const downloadUrl = `https://pollen-server.ngrok.io/download?locale=${documentLocale}&path=`
    const request = new XMLHttpRequest();
    const formData = new FormData();


    request.open("POST", API_ENDPOINT, true);
    request.onreadystatechange = () => {
      setIsLoading(false)
      if (request.readyState === 4 && request.status === 200) {
        let responseJson = JSON.parse(request.responseText)
        let newImageTiles = []
        setChosenImages(responseJson.images_with_bboxes.map(url => downloadUrl+url))
        responseJson.images_with_bboxes.forEach((imageUrl, index) => {
          newImageTiles.push(
            <div
              className={"image-tile"}
              key={imageUrl}
              onClick={() => {
                setChosenImage(downloadUrl + imageUrl)
                setChosenImageHidden(false)
              }}
            >
              <img src={downloadUrl + imageUrl}/>
            </div>
          )
        })
        setImageTiles(newImageTiles)
        setDidFormReport(true)
        setReportPDF(downloadUrl + responseJson.report)
        setReportCSV(downloadUrl + responseJson.csv)
      }
    };

    for (let i = 0; i < chosenImages.length; i++) {
      formData.append(`file${i}.png`, chosenImages[i]);
    }
    request.send(formData);
  }

  const downloadPDF = () => {
    window.open(reportPDF, '_blank')
  }

  const downloadCSV = () => {
    window.open(reportCSV, '_blank')
    setDidDownloadCsv(true)
  }

  const aproveCsv = () => {
    const API_ENDPOINT = `https://pollen-server.ngrok.io/accept?report=${reportCSV.split('/')[reportCSV.split('/').length-1]}`;
    const request = new XMLHttpRequest();

    request.open("POST", API_ENDPOINT, true);
    request.onreadystatechange = () => {}

    request.send();
  }

  const correctCsv = (correctionCsv) => {
    if(!correctionCsv.length){
      return
    }
    const API_ENDPOINT = `https://pollen-server.ngrok.io/upload?report=${correctionCsv[0].name}`;
    const request = new XMLHttpRequest();
    const formData = new FormData();

    request.open("POST", API_ENDPOINT, true);
    request.onreadystatechange = () => {
      setIsLoading(false)
      if (request.readyState === 4 && request.status === 200) {
        console.log('corrected')
      }
    };
    console.log(correctionCsv[0])
    formData.append('file', correctionCsv[0]);

    request.send(formData);
    // request.send();
  }


  useEffect(() => {

    const onKeydown = (event) => {
      if(event.key === 'ArrowRight' && chosenImages !== null) {
        if(chosenImages.length > chosenImage+1) {
          setChosenImage(chosenImage+1)
        }
      }
      if(event.key === 'ArrowLeft' && chosenImages !== null) {
        if(chosenImage-1 >= 0) {
          setChosenImage(chosenImage-1)
        }
      }
    }


    window.document.removeEventListener('keydown', onKeydown)
    window.document.addEventListener('keydown', onKeydown)
    return () => {
      window.document.removeEventListener('keydown', onKeydown)
    };
  }, [chosenImages, chosenImage]);


  return (
    <div className={"predict-page"}>

      {chosenImageHidden ? null :
        <button
          className={"hide"}
          onClick={() => {
            setChosenImageHidden(true)
          }}
        />
      }
      <img
        key={chosenImage}
        src={chosenImage !== null ? chosenImages[chosenImage] : ""}
        className={"chosen-image" + (chosenImageHidden ? " hidden" : "")}
      />

      <img className={"logo"} height={"80px"} src={logo}/>
      <div
        className={"faq" + (faqExtended ? " extended" : "")}
        onClick={() => setFaqExtended(!faqExtended)}
      >
        <div className={"overlay" + (faqExtended ? " extended" : "")}>
          ?
        </div>
        <div className={"body"}>
          –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø—ã–ª—å—Ü–µ–≤—ã—Ö –∑–µ—Ä–µ–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö Pollen Analyst. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞,
          –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º.
        </div>
        <div className={"title"}>
          –í—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        </div>
        <div className={"body"}>
          –í —Å–µ—Ä–≤–∏—Å–µ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ 100 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–±—â–∏–º –æ–±—ä–µ–º–æ–º –Ω–µ –±–æ–ª–µ–µ 200 –ú–± –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–í—ã–±—Ä–∞—Ç—å
          —Ñ–æ—Ç–æ¬ª. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ‚Äúpng‚Äù, ‚Äújpg‚Äù, ‚Äújpeg‚Äù. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å —É–º–µ–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
          –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—ã–ª—å—Ü—ã —Å –æ–ø—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–∏–∫—Ä–æ—Å–∫–æ–ø–∞, –æ–∫—Ä–∞—à–µ–Ω–Ω–æ–π —Ñ—É–∫—Å–∏–Ω–æ–º.
        </div>
        <div className={"title"}>
          –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
        </div>
        <div className={"body"}>
          –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç¬ª. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∑—è—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –≥–¥–µ –±—É–¥–µ—Ç
          –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –∏—Ö —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π. –î–∞–ª–µ–µ –±—É–¥–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –æ—Ç—á–µ—Ç –ø–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–π –ø—ã–ª—å—Ü–µ.
          –û—Ç—á–µ—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤–º–µ—Å—Ç–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å–ø—É—Å—Ç—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
          –û–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ —Å–æ—Å–µ–¥–Ω–µ–π –≤–∫–ª–∞–¥–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞, –∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –Ω–∞
          –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö.
        </div>
      </div>

      <div className={"controls"}>
        <div className={"description"}>
          –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –æ—Ç 1 –¥–æ 500 —Ñ–æ—Ç–æ,
          —á—Ç–æ–± –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ–ª–æ–∂–∏—Ç–µ –∏—Ö –≤ –ø–∞–ø–∫—É –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø–∞–ø–∫—É.
        </div>
        <input
          directory=""
          webkitdirectory=""
          type="file"
          id="selectedFile"
          style={{display: "none"}}
          onChange={(e) => handleChange(e.target.files)}
        />
        <div className={"buttons"}>
          <button
            className={"action-button" + (imageTiles.length === 0 ? " active" : "")}
            onClick={() => document.getElementById('selectedFile').click()}
          >
            <div className={"inner-text"}>
              {!didFormReport ?
                <>–≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ</>
                :
                <>–≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ</>
              }
            </div>
          </button>
          {didFormReport ?
            <>
              <button
                className={"action-button"}
                onClick={downloadPDF}
              >
                üì• PDF
              </button>
              <button
                className={"action-button"}
                onClick={downloadCSV}
              >
                üì• CSV
              </button>
            </>
            :
            <button
              className={"action-button" + ((imageTiles.length > 0 && !didFormReport) ? " active" : " passive")}
              style={!isLoading ? {width: '260px', height: '40.5px'}: {width: '30px', height: '30px'}}
              onClick={predict}
            >
              {isLoading ?
                <Spinner width={20}/>
                :
                <>—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç</>
              }
            </button>
          }
        </div>
      </div>
      <div className={"images"}>
        {imageTiles}
      </div>
      <div className={"buttons"}>

        {didDownloadCsv &&
          <>
            <button
              className={"action-button secondary"}
              onClick={aproveCsv}
            >
              –æ—Ç—á–µ—Ç –≤–µ—Ä–Ω—ã–π
            </button>
            <input
              type="file"
              id="selectedCSV"
              style={{display: "none"}}
              onChange={(e) => correctCsv(e.target.files)}
            />
            <button
              className={"action-button secondary"}
              onClick={() => document.getElementById('selectedCSV').click()}
            >
              —Å–∫–æ—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å CSV
            </button>
          </>
        }
      </div>

    </div>
  )
}

export default PredictPage;
